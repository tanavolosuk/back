// routes/profile.js
// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

const express = require('express');
const { ObjectId } = require('mongodb'); // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç ObjectId
const User = require('../models/User');
const MedicalProfile = require('../models/MedicalProfile');
const { authenticateToken } = require('../middleware/auth');
const { validateMedicalProfile } = require('../middleware/validation');

const router = express.Router();

// GET /api/profile/medical - –ü–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
router.get('/medical', authenticateToken, async (req, res) => {
    try {
        console.log('üîÑ –ó–∞–ø—Ä–æ—Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.id);
        
        const user = await User.findById(req.user.id);
        
        if (!user) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID:', req.user.id);
            return res.status(404).json({
                success: false,
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }
        
        console.log('‚úÖ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω –¥–ª—è:', user.username);
        
        res.json({
            success: true,
            data: {
                medicalProfile: user.medicalProfile,
                personalData: user.personalData
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è'
        });
    }
});

// PUT /api/profile/medical - –û–±–Ω–æ–≤–∏—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
router.put('/medical', authenticateToken, validateMedicalProfile, async (req, res) => {
    try {
        const medicalData = req.body;
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.id);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        const updated = await User.updateMedicalProfile(req.user.id, medicalData);
        
        if (!updated) {
            return res.status(404).json({
                success: false,
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }
        
        console.log('‚úÖ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.id);
        
        res.json({
            success: true,
            message: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
            data: {
                medicalProfile: medicalData
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è'
        });
    }
});

// PUT /api/profile/personal - –û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
router.put('/personal', authenticateToken, async (req, res) => {
    try {
        const personalData = req.body;
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.id);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        if (personalData.birthDate && !MedicalProfile.isValidBirthDate(personalData.birthDate)) {
            return res.status(400).json({
                success: false,
                message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const updated = await User.updatePersonalData(req.user.id, personalData);
        
        if (!updated) {
            return res.status(404).json({
                success: false,
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }
        
        console.log('‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.id);
        
        res.json({
            success: true,
            message: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            data: {
                personalData: personalData
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
        });
    }
});

// GET /api/profile/complete - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (–≤–∫–ª—é—á–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∑–∞–º–µ—Ç–∫–∏)
router.get('/complete', authenticateToken, async (req, res) => {
    try {
        const db = require('../config/database').getDatabase();
        const usersCollection = db.collection('users');
        
        console.log('üîÑ –ó–∞–ø—Ä–æ—Å –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.id);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ObjectId –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ MongoDB
        const user = await usersCollection.findOne(
            { _id: new ObjectId(req.user.id) }, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ ObjectId
            { projection: { password: 0 } } // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª—å
        );
        
        if (!user) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø–æ ID:', req.user.id);
            return res.status(404).json({
                success: false,
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }
        
        console.log('‚úÖ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω –¥–ª—è:', user.username);
        
        res.json({
            success: true,
            data: {
                user: user
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è'
        });
    }
});

module.exports = router;