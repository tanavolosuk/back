// models/User.js
const { getDatabase } = require('../config/database');
const bcrypt = require('bcryptjs');
const { ObjectId } = require('mongodb'); // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

class User {
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    static async create(userData) {
        const db = getDatabase();
        const usersCollection = db.collection('users');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username
        const existingUser = await usersCollection.findOne({ 
            username: userData.username 
        });
        
        if (existingUser) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
        
        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = await bcrypt.hash(userData.password, 12);
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º
        const user = {
            // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            username: userData.username,
            password: hashedPassword,
            email: userData.email || '',
            
            // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            personalData: {
                fullName: userData.fullName || '',
                birthDate: userData.birthDate || null,
                gender: userData.gender || '', // 'male', 'female', 'other'
                phone: userData.phone || '',
                emergencyContact: userData.emergencyContact || ''
            },
            
            // –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
            medicalProfile: {
                bloodType: userData.bloodType || '', // 'A+', 'A-', 'B+', etc.
                height: userData.height || null, // –≤ —Å–º
                weight: userData.weight || null, // –≤ –∫–≥
                chronicDiseases: userData.chronicDiseases || [],
                allergies: userData.allergies || [],
                currentMedications: userData.currentMedications || [],
                notes: userData.medicalNotes || ''
            },
            
            // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
            isActive: true,
            createdAt: new Date(),
            updatedAt: new Date(),
            lastLogin: null
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const result = await usersCollection.insertOne(user);
        
        return {
            id: result.insertedId.toString(), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ObjectId –≤ —Å—Ç—Ä–æ–∫—É
            username: user.username,
            email: user.email,
            personalData: user.personalData,
            createdAt: user.createdAt
        };
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
    static async findByUsername(username) {
        const db = getDatabase();
        const usersCollection = db.collection('users');
        
        return await usersCollection.findOne({ username });
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
    static async findById(userId) {
        const db = getDatabase();
        const usersCollection = db.collection('users');
        
        console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID:', userId);
        
        try {
            // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–∞–∫ –ø–æ —Å—Ç—Ä–æ–∫–µ, —Ç–∞–∫ –∏ –ø–æ ObjectId
            let user = await usersCollection.findOne(
                { _id: new ObjectId(userId) },
                { 
                    projection: { 
                        password: 0,
                        'medicalProfile.notes': 0
                    } 
                }
            );
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ObjectId, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Å—Ç—Ä–æ–∫–µ (–∫–∞–∫ –≤ –ª–æ–≥–∏–Ω–µ)
            if (!user) {
                console.log('üîÑ –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É ID...');
                user = await usersCollection.findOne(
                    { _id: userId },
                    { 
                        projection: { 
                            password: 0,
                            'medicalProfile.notes': 0
                        } 
                    }
                );
            }
            
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
            return user;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
    static async checkPassword(plainPassword, hashedPassword) {
        return await bcrypt.compare(plainPassword, hashedPassword);
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    static async updateMedicalProfile(userId, medicalData) {
        const db = getDatabase();
        const usersCollection = db.collection('users');
        
        const updateData = {
            'medicalProfile': medicalData,
            'updatedAt': new Date()
        };
        
        let result;
        try {
            // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ ObjectId
            result = await usersCollection.updateOne(
                { _id: new ObjectId(userId) },
                { $set: updateData }
            );
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ —Å—Ç—Ä–æ–∫–µ
            if (result.matchedCount === 0) {
                result = await usersCollection.updateOne(
                    { _id: userId },
                    { $set: updateData }
                );
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            return false;
        }
        
        return result.modifiedCount > 0;
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    static async updatePersonalData(userId, personalData) {
        const db = getDatabase();
        const usersCollection = db.collection('users');
        
        const updateData = {
            'personalData': personalData,
            'updatedAt': new Date()
        };
        
        let result;
        try {
            // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ ObjectId
            result = await usersCollection.updateOne(
                { _id: new ObjectId(userId) },
                { $set: updateData }
            );
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ —Å—Ç—Ä–æ–∫–µ
            if (result.matchedCount === 0) {
                result = await usersCollection.updateOne(
                    { _id: userId },
                    { $set: updateData }
                );
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
        
        return result.modifiedCount > 0;
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    static async updateLastLogin(userId) {
        const db = getDatabase();
        const usersCollection = db.collection('users');
        
        try {
            // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ ObjectId
            let result = await usersCollection.updateOne(
                { _id: new ObjectId(userId) },
                { $set: { lastLogin: new Date() } }
            );
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ —Å—Ç—Ä–æ–∫–µ
            if (result.matchedCount === 0) {
                await usersCollection.updateOne(
                    { _id: userId },
                    { $set: { lastLogin: new Date() } }
                );
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ lastLogin:', error);
        }
    }
}

module.exports = User;